# -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (handlers) --
# –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—É (–∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (handlers) ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏

__all__ = [
    "register_message_handler"
]

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–∞
import logging
from aiogram import Router, types, filters, F
from db import async_session, User
from sqlalchemy import select, insert
from .keyboards import keyboard_continue
from .callbacks import callback_continue
from .keyboards import keyboard_who
from .callbacks import callback_who


# —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
help_string = """
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç YaDiskBot!
‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –±–æ—Ç—É ‚Äî /help
üë®üèª‚Äçü¶± –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî /status
üë®üèª‚Äçü¶± –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ ‚Äî /register
"""

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


async def command_start_handler(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–ø—Ä–∞–≤–∫–∏ /start, /help"""

    async with async_session() as session:
        query = select(User).where(message.from_user.id == User.user_id)
        user_exists = await session.execute(query)

        if user_exists.scalars().all():
            await message.answer(help_string)
        else:
            await message.reply("–í—ã –∫—Ç–æ?", reply_markup=keyboard_who)
            new_user = {
                'user_id': message.from_user.id,
                'username': message.from_user.username,
            }
            insert_query = insert(User).values(**new_user)
            await session.execute(insert_query)
            await session.commit()
            await message.answer(help_string)
            logger.info(f"register new user {message.from_user.id}")


async def command_status_handler(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ /status"""

    async with async_session() as session:
        query = select(User).where(message.from_user.id == User.user_id)
        result = await session.execute(query)
        user = result.scalar()
        info = (f"<b>UserId</b>: <i>{user.user_id}</i>\n"
                f"<b>UserName</b>: <i>{user.username}</i>)\n"
                f"<b>Registration Date</b>: <i>{user.reg_date}</i>")
        await message.answer(info, parse_mode="HTML")
        logger.info(f"user {message.from_user.id} asks for status!")

    await message.reply("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keyboard_continue)


async def command_register_handler(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /register"""

    async with async_session() as session:
        query = select(User).where(message.from_user.id == User.user_id)
        result = await session.execute(query)
        user = result.scalar()
        await message.answer("https://oauth.yandex.ru/client/new", parse_mode="HTML")
        logger.info(f"user {message.from_user.id} reg!")

    await message.reply("–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ", reply_markup=keyboard_continue)


async def process_unknown_command(message: types.Message) -> None:
    """—ç—Ö–æ-–æ—Ç–≤–µ—Ç"""
    await message.reply(text="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    logger.info(f"user {message.from_user.id} send unknown message or command!")


async def register_message_handler(router: Router):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è"""
    router.message.register(command_start_handler, filters.Command(commands=["help", "start"]))
    router.message.register(command_status_handler, filters.Command(commands=["status"]))
    router.message.register(command_register_handler, filters.Command(commands=["register"]))
    router.callback_query.register(callback_continue, F.data.startswith("continue_"))
    router.callback_query.register(callback_who, F.data.startswith("who_"))
    router.message.register(process_unknown_command)